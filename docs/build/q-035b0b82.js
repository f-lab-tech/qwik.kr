import{i as n,u as a}from"./q-c0df5510.js";const c=[{text:"Component Life Cycle and SSR",id:"component-life-cycle-and-ssr",level:2},{text:"Example",id:"example",level:3}],s={title:"useCleanup$() Hook",meta:[],styles:[],links:[]},l={title:"useCleanup$() Hook"};function o(t){const e=Object.assign({p:"p",code:"code",h2:"h2",a:"a",span:"span",h3:"h3"},t.components);return n(a,{children:[n(e.p,{children:["Use ",n(e.code,{children:"useCleanup$()"})," hook to execute code after the component is unmounted. A typical use case is to clean up resources such as timers or subscriptions. (Keep in mind that many methods such as ",n(e.code,{children:"useWatch$()"})," allow returning a cleanup function, which may be a more idiomatic way to solve the problem.)"]}),`
`,n(e.h2,{id:"component-life-cycle-and-ssr",children:[n(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#component-life-cycle-and-ssr",children:n(e.span,{className:"icon icon-link"})}),"Component Life Cycle and SSR"]}),`
`,n(e.p,{children:["Qwik is resumable. Resumability means that the application starts up on the server and then the application is transferred to the client. On the client, the application continues execution from where it left off. The implication of this is that a component may be created on the server and destroyed on the client. This means that the component's ",n(e.code,{children:"useMount$()"})," method may execute on the server and but its ",n(e.code,{children:"useCleanup$()"})," method may execute on the client."]}),`
`,n(e.h3,{id:"example",children:[n(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#example",children:n(e.span,{className:"icon icon-link"})}),"Example"]}),`
`,n(e.p,{children:["Modify the ",n(e.code,{children:"<Greeter>"})," component to use ",n(e.code,{children:"useCleanup$()"})," to alert the user when the component is unmounted."]})]})}function h(t={}){const{wrapper:e}=t.components||{};return e?n(e,Object.assign({},t,{children:n(o,t)})):o(t)}export{h as default,l as frontmatter,s as head,c as headings};
