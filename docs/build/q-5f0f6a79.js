import{i as t,u as r}from"./q-c0df5510.js";const a=[{text:"Static Site Generation (SSG) Overview",id:"static-site-generation-ssg-overview",level:1},{text:"SSG vs. Server-Side Rendered (SSR)",id:"ssg-vs-server-side-rendered-ssr",level:2}],o={title:"Static Site Generation (SSG) Overview",meta:[],styles:[],links:[]},d={title:"Static Site Generation (SSG) Overview"};function i(n){const e=Object.assign({h1:"h1",a:"a",span:"span",p:"p",code:"code",h2:"h2"},n.components);return t(r,{children:[t(e.h1,{id:"static-site-generation-ssg-overview",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#static-site-generation-ssg-overview",children:t(e.span,{className:"icon icon-link"})}),"Static Site Generation (SSG) Overview"]}),`
`,t(e.p,{children:`Static Site Generation, or commonly referred to as "SSG", is the process of pre-rendering site webpages into static HTML files. The benefit is that when a visitor requests the webpage, the response is an pre-generated HTML file (a static file), and doesn't require the webpage's HTML to "rebuild" on the visitors browser, or dynamically created by your server (more on this later).`}),`
`,t(e.p,{children:[`Additionally, due to Qwik's underlying architecture, page performance also benefits by not requiring a Javascript "hydration" step, which can significantly lower performance and slow down user interactivity. By pre-rendering static `,t(e.code,{children:"index.html"})," files with SSG, and combined with Qwik's ",t(e.a,{href:"/docs/concepts/resumable/",children:"resumability"}),", static site generation offers many performance benefits over legacy solutions."]}),`
`,t(e.h2,{id:"ssg-vs-server-side-rendered-ssr",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#ssg-vs-server-side-rendered-ssr",children:t(e.span,{className:"icon icon-link"})}),"SSG vs. Server-Side Rendered (SSR)"]}),`
`,t(e.p,{children:[`Qwik City is capable of taking a Qwik application, no matter if it's a "webapp" or "website", and generate static HTML. Once it's generated as HTML, Qwik is fundamentally able to skip rebuilding the app by using `,t(e.a,{href:"/docs/concepts/resumable/",children:"resumability"}),', since the app was already generated as HTML. Both Static Site Generation (SSG) and Server-Side Rendering (SSR) use the same process to generate the HTML. The main difference between the SSG and SSR however, is "when" the HTML is generated.']}),`
`,t(e.p,{children:"In a traditional setup, SSG pre-renders each webpage at build-time, while SSR render's each webpage on-demand for each HTTP request. SSG only needs to generate the HTML one time per build, which is great for webpages where each visitor should see the same content. In contrast, SSR is great when the webpage may be different for each visitor, and would need to render custom HTML for each individual HTTP request."}),`
`,t(e.p,{children:"For example, SSG is ideal for a blog or docs site, where all the content should be the same for each visitor. While SSR may work fine for a blog, it may be an unnecessary strain for your HTTP servers to render the blog content for every visitor, even though they'd all end up seeing the same HTML."}),`
`,t(e.p,{children:"However, an account dashboard would commonly have different content for each signed-in user. In this setup, each user should get their own rendered HTML with their account information, rather than everyone seeing the exact same content. This is where SSR would be preferred."}),`
`,t(e.p,{children:"Ideally, the more you can do with static site generation the better, since that'll have less costs to your servers and faster response times."}),`
`,t(e.p,{children:"With Qwik City however, the decision to use SSG or SSR, does not have to be one or the other decision. Instead, your own implementation can choose to have some route paths use SSG, while some other pages use SSR. It's entirely up to you and your requirements."})]})}function c(n={}){const{wrapper:e}=n.components||{};return e?t(e,Object.assign({},n,{children:t(i,n)})):i(n)}export{c as default,d as frontmatter,o as head,a as headings};
