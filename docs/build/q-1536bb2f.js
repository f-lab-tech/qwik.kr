import{i as t,u as o}from"./q-c0df5510.js";const r=[{text:"Think Qwik",id:"think-qwik",level:1},{text:"Core principle",id:"core-principle",level:2},{text:"Resumability & Serialization",id:"resumability--serialization",level:2},{text:"What is the problem?",id:"what-is-the-problem",level:2},{text:"How did we get here?",id:"how-did-we-get-here",level:3},{text:"What's the solution?",id:"whats-the-solution",level:3},{text:"Size should not be a developer problem",id:"size-should-not-be-a-developer-problem",level:3},{text:"Why not fix existing frameworks/tools?",id:"why-not-fix-existing-frameworkstools",level:3},{text:"Why are we building Qwik?",id:"why-are-we-building-qwik",level:3}],s={title:"Think Qwik",meta:[],styles:[],links:[]},l={title:"Think Qwik"};function a(i){const e=Object.assign({h1:"h1",a:"a",span:"span",p:"p",ol:"ol",li:"li",h2:"h2",blockquote:"blockquote",strong:"strong",h3:"h3",code:"code"},i.components);return t(o,{children:[t(e.h1,{id:"think-qwik",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#think-qwik",children:t(e.span,{className:"icon icon-link"})}),"Think Qwik"]}),`
`,t(e.p,{children:"Qwik is very similar to other web frameworks on a high level. Qwik is a framework that renders a tree of components resulting in an interactive application."}),`
`,t(e.p,{children:"The unique part of Qwik is not in what it does but in how it achieves its goals. Qwik's goal is to have instant-on applications, even on mobile devices. Qwik achieves this through two main strategies:"}),`
`,t(e.ol,{children:[`
`,t(e.li,{children:"Delay execution and download of JavaScript for as long as possible."}),`
`,t(e.li,{children:"Serialize the execution state of the application and the framework on the server and resume it on the client."}),`
`]}),`
`,t(e.p,{children:"The goal of Qwik is having only to download and execute the bare minimum of the application."}),`
`,t(e.h2,{id:"core-principle",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#core-principle",children:t(e.span,{className:"icon icon-link"})}),"Core principle"]}),`
`,t(e.blockquote,{children:[`
`,t(e.p,{children:"Delay execution of JavaScript as much as possible."}),`
`]}),`
`,t(e.p,{children:"Qwik applications startup fast because there is a minimal amount of JavaScript code to execute. (At its simplest, a Qwik application only needs about 1KB of JavaScript to become interactive.)"}),`
`,t(e.p,{children:"By aggressively delaying the application download and execution, Qwik can provide near-instant startup performance that current generations of web frameworks can't match."}),`
`,t(e.p,{children:"Qwik is fast not because it uses clever algorithms but because it is designed in a way where most of the JavaScript never needs to be downloaded or executed. Its speed comes from not doing things (such as hydration) that other frameworks have to do."}),`
`,t(e.h2,{id:"resumability--serialization",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#resumability--serialization",children:t(e.span,{className:"icon icon-link"})}),"Resumability & Serialization"]}),`
`,t(e.p,{children:["Resumability is discussed in detail ",t(e.a,{href:"/docs/concepts/resumable/",children:"here"}),". Resumability allows Qwik applications to continue execution where the server left off. All frameworks need to keep track of internal data structures about the application's state. The current generation of frameworks does not preserve this information from the server to browser transition. As a result, the framework's data structures need to be rebuilt in the browser. The rebuilding of data structures and attaching of listeners is called hydration."]}),`
`,t(e.p,{children:"Qwik serializes listeners, internal data structures, and application state into the HTML on server browser handoff. Because all of the information is serialized in HTML, the client can just resume execution where the server left off."}),`
`,t(e.h2,{id:"what-is-the-problem",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#what-is-the-problem",children:t(e.span,{className:"icon icon-link"})}),"What is the problem?"]}),`
`,t(e.p,{children:"Modern websites require vast amounts of JavaScript to become interactive. Too much JavaScript manifests itself in two problems:"}),`
`,t(e.ol,{children:[`
`,t(e.li,{children:[t(e.strong,{children:"Network bandwidth"}),": A large amount of code is shipped to the client, which may take a long time on slow networks."]}),`
`,t(e.li,{children:[t(e.strong,{children:"Startup time"}),": Once on the client, the code needs to be executed (as part of hydration) to get the site interactive."]}),`
`]}),`
`,t(e.p,{children:"As our applications get more complex with a higher fidelity of interactivity, the amount of code has steadily increased over the years with no sign of stopping. Simply put, our sites are getting more complex. An increase in site complexity, in turn, requires more code. All of this code negatively impacts site startup performance."}),`
`,t(e.p,{children:"To make matters worse, JavaScript is single-threaded; therefore, our complex sites can't take advantage of modern multi-core CPUs."}),`
`,t(e.h3,{id:"how-did-we-get-here",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#how-did-we-get-here",children:t(e.span,{className:"icon icon-link"})}),"How did we get here?"]}),`
`,t(e.p,{children:"The solution to the above problem is both obvious and hard: Ship less JavaScript."}),`
`,t(e.p,{children:"It's obvious because we all agree that sites with less JavaScript would perform better."}),`
`,t(e.p,{children:"It is hard because our tools don't help us to get there. Almost all of our tools solve problems in a way that makes shipping less JavaScript hard. This is because most of our tools are designed to solve a specific problem without thinking about the amount of JavaScript they generate."}),`
`,t(e.p,{children:["Do you need to solve rendering, styling, animation, A/B testing, analytics, etc.? There is a tool for that. Just import or add a ",t(e.code,{children:"<script>"})," tag, and these tools will solve your problems, but at the expense of making the initial bundle bigger."]}),`
`,t(e.p,{children:"As an industry, we have failed to think about the implication of bundle size. Each tool solves a specific problem individually, but the size is not part of the equation. Size is the problem that emerges when you put all of the tools together, and by that point, there is very little the developer can do about it."}),`
`,t(e.h3,{id:"whats-the-solution",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#whats-the-solution",children:t(e.span,{className:"icon icon-link"})}),"What's the solution?"]}),`
`,t(e.p,{children:"Qwik is designed from the ground up to address the size problem. Small bundle size is its initial goal, and all other design decisions are subservient to that goal."}),`
`,t(e.p,{children:"Qwik is not about creating less JavaScript. Qwik is about not having to ship all of that JavaScript to the client at once on application startup. Qwik is what you end up with when you take the idea of delay loading of JavaScript to the extreme."}),`
`,t(e.p,{children:"Yes, Qwik requires a different way of thinking and designing your application, but the result is near zero initial JavaScript with progressive JavaScript download based on user interactions."}),`
`,t(e.h3,{id:"size-should-not-be-a-developer-problem",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#size-should-not-be-a-developer-problem",children:t(e.span,{className:"icon icon-link"})}),"Size should not be a developer problem"]}),`
`,t(e.p,{children:"Today, size is the developers' problem. If you follow best practices for each of the frameworks, tools, etc., you will have a large bundle size. It is at that time when developers start to mitigate the problem with some sort of lazy loading boundaries etc. (But as anyone who has tried will tell you, the options are limited.)"}),`
`,t(e.p,{children:"Our industry best practices lead to large bundles, and the web is full of examples."}),`
`,t(e.p,{children:"The mantra of Qwik is that bundle size should not be something that developers should think about. It should just naturally emerge as part of how the framework is designed."}),`
`,t(e.p,{children:"Qwik is designed from the ground up to produce lots of lazy loadable boundaries. Tooling can break up your application into many lazy-loadable chunks, and the runtime can download them only when needed."}),`
`,t(e.h3,{id:"why-not-fix-existing-frameworkstools",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#why-not-fix-existing-frameworkstools",children:t(e.span,{className:"icon icon-link"})}),"Why not fix existing frameworks/tools?"]}),`
`,t(e.p,{children:"In short, the lazy loading philosophy is at a low level and can not be retroactively added to the existing frameworks/tools without changing them fundamentally. Such fundamental change would be incompatible with the framework/tools and their respective ecosystems, rendering them useless."}),`
`,t(e.p,{children:"When a framework makes certain assumptions, such as that all rendering is synchronous, adding asynchronous lazy loading becomes pretty close to impossible. Or, if a framework recovers the listener location from templates, then download and execution of those templates is a must before the site can be interactive. These are just some of the more obvious examples, but in practice, there is a long tail of endless reasons why the current mental model does not fit the requirements of resumability."}),`
`,t(e.p,{children:"The above also means that it is not feasible for existing frameworks to add resumability as a feature. Existing frameworks will never be able to do what Qwik can (without breaking backward compatibility)."}),`
`,t(e.h3,{id:"why-are-we-building-qwik",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#why-are-we-building-qwik",children:t(e.span,{className:"icon icon-link"})}),"Why are we building Qwik?"]}),`
`,t(e.p,{children:"Because we believe there is a better way to build sites. A way that does not involve massive amounts of JavaScript that must be downloaded eagerly on startup before your site becomes interactive. A way that allows the developer to think about adding features rather than how to break up the huge codebase into smaller chunks. A way to have instant-on sites for a better user experience. And all of that, in a way that is independent of the size of the application codebase."})]})}function h(i={}){const{wrapper:e}=i.components||{};return e?t(e,Object.assign({},i,{children:t(a,i)})):a(i)}export{h as default,l as frontmatter,s as head,r as headings};
