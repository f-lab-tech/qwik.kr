import{i as n,u as o}from"./q-c0df5510.js";const s=[{text:"Component Life Cycle and SSR",id:"component-life-cycle-and-ssr",level:2},{text:"Usage of useMount$()",id:"usage-of-usemount",level:2},{text:"useMount$() variations",id:"usemount-variations",level:2},{text:"Server only imports",id:"server-only-imports",level:2},{text:"Example",id:"example",level:3}],r={title:"useMount$() Hook",meta:[],styles:[],links:[]},c={title:"useMount$() Hook"};function i(t){const e=Object.assign({p:"p",code:"code",h2:"h2",a:"a",span:"span",ul:"ul",li:"li",h3:"h3"},t.components);return n(o,{children:[n(e.p,{children:["Use ",n(e.code,{children:"useMount$()"})," to execute code when the component is mounted into the rendering tree. (Another way to think about it is that ",n(e.code,{children:"useMount$()"})," executes on component creation.)"]}),`
`,n(e.h2,{id:"component-life-cycle-and-ssr",children:[n(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#component-life-cycle-and-ssr",children:n(e.span,{className:"icon icon-link"})}),"Component Life Cycle and SSR"]}),`
`,n(e.p,{children:["Qwik is resumable. Resumability means that the application starts up on the server and then the application is transferred to the client. On the client, the application continues execution from where it left off. The implication of this is that a component may be created on the server and destroyed on the client. This means that the component's ",n(e.code,{children:"useMount$()"})," method may execute on the server and but its ",n(e.code,{children:"useCleanup$()"})," method may execute on the client."]}),`
`,n(e.h2,{id:"usage-of-usemount",children:[n(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#usage-of-usemount",children:n(e.span,{className:"icon icon-link"})}),"Usage of ",n(e.code,{children:"useMount$()"})]}),`
`,n(e.p,{children:[n(e.code,{children:"useMount$()"})," is a hook that executes a callback when the component is mounted into the rendering tree. The ",n(e.code,{children:"useMount$()"})," function can be async. ",n(e.code,{children:"useMount$()"})," delays the rendering of the component until the ",n(e.code,{children:"useMount$()"})," callback is finished executing. Typical usage for ",n(e.code,{children:"useMount$()"})," is to fetch data needed for initial rendering."]}),`
`,n(e.h2,{id:"usemount-variations",children:[n(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#usemount-variations",children:n(e.span,{className:"icon icon-link"})}),n(e.code,{children:"useMount$()"})," variations"]}),`
`,n(e.p,{children:["The ",n(e.code,{children:"useMount$()"})," hook is subdivided into server and client versions:"]}),`
`,n(e.ul,{children:[`
`,n(e.li,{children:[n(e.code,{children:"useServerMount$()"}),": Hook that executes on the component mount when in a server environment. This is useful because server often has different APIs for retrieving data."]}),`
`]}),`
`,n(e.p,{children:["Use ",n(e.code,{children:"useMount$()"})," if the code that needs to be executed is identical."]}),`
`,n(e.h2,{id:"server-only-imports",children:[n(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#server-only-imports",children:n(e.span,{className:"icon icon-link"})}),"Server only imports"]}),`
`,n(e.p,{children:["Because ",n(e.code,{children:"useServerMount$()"})," hooks have ",n(e.code,{children:"$"})," in their name, they are subject to lazy loading. Lazy-loading means that the function is moved into a new file by the Optimizer. When the function is moved the Optimizer also moves any imports with it. This means that it is safe to have server-only imports as part of the ",n(e.code,{children:"useServerMount$()"})," hook as they will be removed by the Optimizer."]}),`
`,n(e.h3,{id:"example",children:[n(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#example",children:n(e.span,{className:"icon icon-link"})}),"Example"]}),`
`,n(e.p,{children:["Use ",n(e.code,{children:"useServerMount()"})," to fetch data needed for the rendering."]})]})}function d(t={}){const{wrapper:e}=t.components||{};return e?n(e,Object.assign({},t,{children:n(i,t)})):i(t)}export{d as default,c as frontmatter,r as head,s as headings};
