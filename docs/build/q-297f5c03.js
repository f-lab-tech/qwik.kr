import{i as t,u as o}from"./q-c0df5510.js";const l=[{text:"Example",id:"example",level:3}],d={title:"Loading Data",meta:[],styles:[],links:[]},c={title:"Loading Data"};function n(a){const e=Object.assign({p:"p",code:"code",h3:"h3",a:"a",span:"span"},a.components);return t(o,{children:[t(e.p,{children:"The Optimizer can be used to lazy-load data, not just functions. The benefit of doing that is that lazy loading any part of your application becomes easy."}),`
`,t(e.p,{children:["Use the stand-alone ",t(e.code,{children:"$()"})," function to mark the data that you wish to lazy load. The ",t(e.code,{children:"$()"})," function returns a ",t(e.code,{children:"QRL"})," that is a reference that can be serialized by Qwik and that can later be resolved into the original value."]}),`
`,t(e.h3,{id:"example",children:[t(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#example",children:t(e.span,{className:"icon icon-link"})}),"Example"]}),`
`,t(e.p,{children:"Load the data representing the message lazily as part of the click listener."}),`
`,t(e.p,{children:["For this exercise imagine that we wish to lazy load the ",t(e.code,{children:"'Hello World!"}),"' string. Use the ",t(e.code,{children:"$()"})," function to mark the string as lazy-loadable. Then use `await to resolve the lazy-loadable value."]}),`
`,t(e.p,{children:["Go to the ",t(e.code,{children:"Symbols"})," tab and examine how the code was broken down into parts."]})]})}function r(a={}){const{wrapper:e}=a.components||{};return e?t(e,Object.assign({},a,{children:t(n,a)})):n(a)}export{r as default,c as frontmatter,d as head,l as headings};
