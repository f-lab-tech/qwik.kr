import{i as n,u as a}from"./q-c0df5510.js";const r=[{text:"Static vs. Dynamic Tree-shaking",id:"static-vs-dynamic-tree-shaking",level:2},{text:"Example",id:"example",level:3}],c={title:"Understanding Qwik Difference - Tree-shaking",meta:[],styles:[],links:[]},s={title:"Understanding Qwik Difference - Tree-shaking"};function i(t){const e=Object.assign({p:"p",h2:"h2",a:"a",span:"span",h3:"h3",code:"code",ul:"ul",li:"li"},t.components);return n(a,{children:[n(e.p,{children:"A key concept of Qwik is that Qwik only loads code for components in the client that need to be re-rendered. If a component is static (does not need to be re-rendered), Qwik will not load the component. This is a form of dynamic tree-shaking. Here word dynamic is used to differentiate it from the classical static tree-shaking."}),`
`,n(e.h2,{id:"static-vs-dynamic-tree-shaking",children:[n(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#static-vs-dynamic-tree-shaking",children:n(e.span,{className:"icon icon-link"})}),"Static vs. Dynamic Tree-shaking"]}),`
`,n(e.p,{children:"Static tree-shaking is how the bundler removes unreachable code. In the case of an application, all components are reachable. This is because the component is reachable on the initial render in SSR. Otherwise, the component would not be visible to the client. So static tree-shaker can't remove any components from our initial application render tree."}),`
`,n(e.p,{children:"Dynamic tree-shaking refers to the fact that after the initial render, the component is no longer reachable from operations the user can perform. The component is only reachable under initial SSR rendering but not from subsequent user interactions. This is why we use the term dynamic tree-shaking to differentiate it from the static tree-shaking that bundler will do."}),`
`,n(e.p,{children:"Static tree-shaking has the disadvantage that it does not take the runtime context into account when deciding if a particular component is reachable. It must assume a worst-case scenario and therefore retain the component as it is reachable on the server during SSR."}),`
`,n(e.h3,{id:"example",children:[n(e.a,{"aria-hidden":"true",tabIndex:"-1",href:"#example",children:n(e.span,{className:"icon icon-link"})}),"Example"]}),`
`,n(e.p,{children:["Interact with the example by clicking on the ",n(e.code,{children:"+1"})," button. Few things to notice:"]}),`
`,n(e.ul,{children:[`
`,n(e.li,{children:"Server must execute all components. So from the server point of view, all of the components are needed."}),`
`,n(e.li,{children:["On the client hitting ",n(e.code,{children:"+1"})," does not require loading the ",n(e.code,{children:"<App>"})," because it does not need to re-render. Therefore ",n(e.code,{children:"<App>"})," is never loaded on the client."]}),`
`]}),`
`,n(e.p,{children:["Now edit ",n(e.code,{children:"Child"})," and delete the binding to ",n(e.code,{children:"{props.store.count}"}),". Notice that now the child is no longer rendered on the client, and its associated render code is never loaded."]}),`
`,n(e.p,{children:"Qwik determines which components are need-based in the runtime context of the application. Databinding determines whether the component is considered static or dynamic and, therefore, whether the component will be tree-shaken."}),`
`,n(e.p,{children:"In practice, many components are static in the application, and they never need to be loaded into the client."})]})}function h(t={}){const{wrapper:e}=t.components||{};return e?n(e,Object.assign({},t,{children:n(i,t)})):i(t)}export{h as default,s as frontmatter,c as head,r as headings};
